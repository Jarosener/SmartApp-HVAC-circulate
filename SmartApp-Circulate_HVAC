/**
 *  Run circulate in HVAC
 *
 *  Copyright 2014 Bob Sanford
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Run circulate in HVAC",
    namespace: "midyear66",
    author: "Bob Sanford",
    description: "Run circulate every X minutes if AC or heat has not been on",
    category: "Green Living",
    iconUrl: "https://s3.amazonaws.com/smartthings-device-icons/thermostat/fan-circulate.png",
    iconX2Url: "https://s3.amazonaws.com/smartthings-device-icons/thermostat/fan-circulate@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartthings-device-icons/thermostat/fan-circulate@2x.png")


preferences {
	section("Title") {
		paragraph "Run circulate in HVAC"
	}
	section("About") {
        	paragraph "Run circulate every X minutes if AC or heat has not been on"
        	paragraph "Version 1.0\nCopyright (c) 2014 ssetco.com"
    	}
    	section("Thermostat") {
        	input "device", "capability.thermostat", title:"Select thermostat to be controlled"
        	input "interval", "number", title:"Set time between circulation cycles (in minutes)", defaultValue:30
        	input "length", "number", title:"Set of length of circulation cycle (in minutes)", defaultValue:5
	}
}

def installed() {
	DEBUG("Installed with settings: ${settings}")
	initialize()
}

def updated() {
	DEBUG("Updated with settings: ${settings}")
	unsubscribe()
	initialize()
}

def scheduler(){
	DEBUG ("scheduler()")
    	settings.device.fanAuto()
	def interval = settings.interval.toInteger() * 60
	def length = settings.length.toInteger() * 60
	DEBUG("Interval in seconds: ${interval}, Length in seconds: ${length}")
	runIn(interval, start_circulate)
	runIn(interval+length, scheduler)
}
        
def start_circulate(){
	DEBUG ("start_circulate()")
	settings.device.fanOn()
}

def initialize() {
	DEBUG("initialize()")
    	subscribe(settings.device, "thermostatOperatingState", eventHandler)
	def running_state = settings.device.currentValue("thermostatOperatingState")
    	DEBUG ("running_state: ${running_state}")
	if(settings.device.currentValue("thermostatOperatingState") == "idle"){
		scheduler()
    }
}
    
// TODO: implement event handlers

def eventHandler(evt){
	DEBUG("eventHandler: ${evt.value}: ${evt}, ${settings}")
	if(evt.value == "idle"){
		initialize()
	}
	if(evt.value == "heating"|| evt.value == "cooling"){
		unsubscribe()
    }
}

private def DEBUG(message){
	log.debug message
}
