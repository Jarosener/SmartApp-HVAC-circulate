/**
 *  Run circulate in HVAC
 *
 *  Copyright 2014 Bob Sanford
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Run circulate in HVAC",
    namespace: "midyear66",
    author: "Bob Sanford",
    description: "Run circulate every X minutes if AC or heat has not been on",
    category: "Green Living",
    iconUrl: "https://s3.amazonaws.com/smartthings-device-icons/thermostat/fan-circulate.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/thermostat/st.thermostat.fan-circulate@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/thermostat/st.thermostat.fan-circulate@2x.png")


preferences {
	section("Title") {
		paragraph "Run circulate in HVAC"
	}
	section("About") {
        	paragraph "Run circulate every X minutes if AC or heat has not been on"
        	paragraph "Version 1.0\nCopyright (c) 2014 ssetco.com"
    	}
    	section("Thermostat") {
        	input "device", "capability.thermostat", title:"Select thermostat to be controlled"
        	input "interval", "number", title:"Set interval for circulation (in minutes)", defaultValue:30
        	input "length", "number", title:"Set of time for circulation (in minutes)", defaultValue:5
	}
}

def installed() {
	DEBUG("Installed with settings: ${settings}")
	initialize()
}

def updated() {
	DEBUG("Updated with settings: ${settings}")
	unsubscribe()
	initialize()
}

def start_circulate() {
	DEBUG("fanCirculate")
    	settings.device.fanOn()
}

def stop_circulate() {
	DEBUG("fanAuto")
    	settings.device.fanAuto()
}

def schedule_start_circulate(){
	def minutes = settings.interval.toInteger()
  	DEBUG("Scheduling circulate on HVAC to run every ${int_minutes} minutes.")
        def sched_start = "0 0/${minutes} * * * ?"
        schedule(sched_start, start_circulate)
}

def schedule_stop_circulate(){
	def minutes = settings.length.toInteger()
        DEBUG("Scheduling circulate on HVAC to stop after ${minutes} minutes.")
    	def sched_stop = "0 0/${minutes} * * * ?"
        schedule(sched_stop, stop_circulate)
}

def initialize() {
	DEBUG("initialize")
	subscribe(settings.device, "thermostatOperatingState", eventHandler)
	if(settings.device.thermostatOperatingState == "idle"){
		schedule_start_circulate()
}
    
// TODO: implement event handlers

def eventHandler(evt){
	DEBUG("$evt.value: $evt, $settings")
	if($evt.value == "idle")
		subscribe(settings.device, "thermostatOperatingState", eventHandler)
	if($evt.value == "heating"|| $evt.value == "cooling")
		unsubscribe()
}

private def DEBUG(message){
	log.debug message
}
